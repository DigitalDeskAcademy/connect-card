generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Organization entity for multi-tenant church structure
/// Represents churches that use the connect card system for member management
model Organization {
  id                    String             @id @default(uuid())
  /// Organization display name (e.g., "First Baptist Church", "Grace Community")
  name                  String
  /// URL-friendly identifier for organization
  slug                  String             @unique
  /// Organization type for business logic and access control
  type                  OrganizationType   @default(CHURCH)
  /// Business domain for email validation and branding
  domain                String?
  /// Organization website URL for branding
  website               String?
  /// Subscription status for billing and access control
  subscriptionStatus    SubscriptionStatus @default(TRIAL)
  /// Trial expiration date for access control
  trialEndsAt           DateTime?
  /// Stripe customer ID for billing
  stripeCustomerId      String?            @unique
  /// Stripe subscription ID for recurring billing
  stripeSubscriptionId  String?            @unique
  /// Subscription start date for billing cycle
  subscriptionStartDate DateTime?
  /// Subscription end date for cancellations
  subscriptionEndDate   DateTime?
  /// Organization creation timestamp
  createdAt             DateTime           @default(now())
  /// Last modification date
  updatedAt             DateTime           @updatedAt
  courses               Course[]
  invitations           Invitation[]
  members               Member[]
  users                 User[]
  churchMembers         ChurchMember[]
  ghlToken              GHLToken?
  payments              Payment[]
  connectCards          ConnectCard[]
  locations             Location[]

  @@map("organization")
}

/// Physical location or campus for multi-location churches
/// Tracks different church campuses for connect card assignment and analytics
model Location {
  id             String        @id @default(uuid())
  /// Organization that owns this location
  organizationId String
  /// Location display name (e.g., "Bainbridge", "Bremerton")
  name           String
  /// URL-friendly identifier for location routing
  slug           String
  /// Active status for location management
  isActive       Boolean       @default(true)
  /// Location creation timestamp
  createdAt      DateTime      @default(now())
  /// Last update timestamp
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  connectCards   ConnectCard[]
  users          User[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@map("location")
}

/// Organization membership for Better Auth organization plugin
model Member {
  id             String       @id @default(uuid())
  /// User ID from Better Auth
  userId         String
  /// Organization ID
  organizationId String
  /// Member role within organization (owner, admin, member)
  role           String
  /// Membership creation date
  createdAt      DateTime     @default(now())
  /// Last update timestamp
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("member")
}

/// Team invitation system for organization onboarding
model Invitation {
  id             String           @id @default(uuid())
  /// Recipient email address
  email          String
  /// Invited user role in organization
  role           String
  /// Invitation token for secure acceptance
  token          String           @unique
  /// Invitation status
  status         InvitationStatus @default(PENDING)
  /// Token expiration date for security
  expiresAt      DateTime
  /// Organization extending the invitation
  organizationId String
  /// User who sent the invitation
  invitedBy      String
  /// User who accepted the invitation (if accepted)
  acceptedBy     String?
  /// Invitation creation timestamp
  createdAt      DateTime         @default(now())
  /// Last status update timestamp
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitation")
}

/// Core user entity supporting multi-tenant authentication and role-based access control
/// Integrates with Better Auth for OAuth flows and Stripe for payment processing
model User {
  id               String           @id
  /// Primary identifier for authentication and communication
  email            String           @unique
  name             String
  /// Better Auth email verification status
  emailVerified    Boolean
  /// Profile avatar URL from OAuth provider
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  /// Temporary ban expiration date
  banExpires       DateTime?
  /// Reason for account suspension
  banReason        String?
  /// Account suspension status
  banned           Boolean?
  /// Organization/Church ID for multi-tenant structure
  /// Optional initially, set after organization creation/joining
  organizationId   String?
  /// Role-based access control for multi-tenant architecture
  role             UserRole?
  /// Stripe customer ID for payment processing
  stripeCustomerId  String?       @unique
  /// Default campus/location for staff member
  defaultLocationId String?
  courses           Course[]
  enrollment        Enrollment[]
  lessonProgress    LessonProgress[]
  accounts          Account[]
  memberships       Member[]
  sessions          Session[]
  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  defaultLocation   Location?     @relation(fields: [defaultLocationId], references: [id])

  @@index([defaultLocationId])
  @@map("user")
}

/// Better Auth session management with security tracking and admin impersonation support
model Session {
  id                   String   @id
  token                String   @unique
  userId               String
  expiresAt            DateTime
  /// Security tracking for suspicious activity detection
  ipAddress            String?
  /// Browser/device identification for security analysis
  userAgent            String?
  createdAt            DateTime
  updatedAt            DateTime
  /// Active organization ID for multi-tenant context
  activeOrganizationId String?
  /// Admin user ID when session is impersonated for support
  impersonatedBy       String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

/// OAuth provider accounts (GitHub, Google, etc.) linked to user profiles
model Account {
  id                    String    @id
  userId                String
  /// Provider-specific account identifier
  accountId             String
  /// OAuth provider (github, google, etc.)
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  /// For email/password authentication
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

/// Email verification codes and password reset tokens
model Verification {
  id         String    @id
  /// Email address or user identifier
  identifier String
  /// Verification code or token
  value      String
  /// Security expiration for verification attempts
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

/// Course catalog entity representing individual learning modules with hierarchical content structure
/// Supports Stripe payment integration, multi-level difficulty progression, and instructor management
model Course {
  id                  String        @id @default(uuid())
  /// Display title for course catalog and student dashboard
  title               String
  /// Rich text course description supporting JSON format for Tiptap editor
  description         String
  /// S3/Tigris storage key for course thumbnail and promotional materials
  fileKey             String
  /// Course price in dollars (converted to cents for Stripe processing)
  price               Int
  /// Indicates if course is free within organization subscription
  isFree              Boolean       @default(true)
  /// Estimated completion time in minutes for progress tracking
  duration            Int
  /// Skill level requirement for student filtering
  level               CourseLevel   @default(Beginner)
  /// Stripe Price ID for payment processing and subscription management (optional for free courses)
  stripePriceId       String?       @unique
  /// Course categorization for catalog organization (Development, Design, etc.)
  category            String
  /// Brief course summary for card displays and SEO meta descriptions
  smallDescription    String
  /// URL-friendly identifier for course routing and SEO
  slug                String        @unique
  /// Publication workflow state for instructor content management
  status              CourseStatus  @default(Draft)
  /// Course creation timestamp for analytics and sorting
  createdAt           DateTime      @default(now())
  /// Last modification date for content freshness tracking
  updatedAt           DateTime      @updatedAt
  userId              String
  /// Organization ID for multi-tenant course management (null for platform courses)
  organizationId      String?
  /// Church control to hide courses from members
  isHiddenFromClients Boolean       @default(false)
  /// Platform course flag for system-provided courses
  isPlatformCourse    Boolean       @default(false)
  /// S3/Tigris directory prefix for all course files (enables efficient bulk deletion)
  s3Prefix            String?
  chapter             Chapter[]
  organization        Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment          Enrollment[]
}

/// Chapter organization entity for course content structuring and sequential lesson delivery
/// Supports drag-and-drop reordering through DND Kit integration for instructor content management
model Chapter {
  id        String   @id @default(uuid())
  /// URL-friendly identifier for chapter routing and customer support
  slug      String
  /// Chapter heading displayed in course navigation and student progress tracking
  title     String
  /// Ordinal sequence number for chapter ordering within course (1, 2, 3...)
  position  Int
  /// Chapter creation timestamp for content development tracking
  createdAt DateTime @default(now())
  /// Last modification date for instructor workflow management
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@unique([courseId, slug])
}

/// Individual lesson content entity supporting video delivery and progress tracking
/// Core learning unit with multimedia content hosted on S3/Tigris storage
model Lesson {
  id             String           @id @default(uuid())
  /// URL-friendly identifier for lesson routing and customer support
  slug           String
  /// Lesson display title for navigation and student dashboard
  title          String
  /// Optional rich text lesson description (JSON format for Tiptap editor)
  description    String?
  /// S3/Tigris storage key for lesson preview image and video poster
  thumbnailKey   String?
  /// S3/Tigris storage key for primary lesson video content
  videoKey       String?
  /// Sequential order within chapter for structured learning progression
  position       Int
  /// S3/Tigris directory prefix for all lesson files (enables efficient bulk deletion)
  s3Prefix       String?
  /// Lesson creation timestamp for instructor workflow tracking
  createdAt      DateTime         @default(now())
  /// Last modification date for content management
  updatedAt      DateTime         @updatedAt
  chapterId      String
  Chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]

  @@unique([chapterId, slug])
}

/// Course enrollment record supporting both staff users and church members
/// Manages course access control and integrates with Stripe webhook payment processing
/// Supports flexible enrollment: staff self-enrollment or member assignment
model Enrollment {
  id              String           @id @default(uuid())
  /// Payment amount in dollars (Stripe processes in cents, stored as dollars)
  amount          Int
  /// Payment and enrollment lifecycle state
  status          EnrollmentStatus @default(Pending)
  /// Enrollment creation timestamp for payment processing tracking
  createdAt       DateTime         @default(now())
  /// Status update timestamp for webhook-driven state changes
  updatedAt       DateTime         @updatedAt
  courseId        String
  /// User ID for staff enrollments (church admins, volunteer leaders)
  userId          String?
  /// Church member ID for member enrollments (visitors, members, volunteers)
  churchMemberId  String?
  Course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChurchMember    ChurchMember?    @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@unique([churchMemberId, courseId])
}

/// Individual lesson completion tracking for progress analytics and course advancement
/// Supports confetti celebrations, progress bars, and learning path unlocking features
/// Tracks progress for both staff users and church members
model LessonProgress {
  id             String        @id @default(uuid())
  /// Binary completion state - lesson watched and marked complete
  completed      Boolean       @default(false)
  /// Initial progress record creation (lesson first accessed)
  createdAt      DateTime      @default(now())
  /// Completion timestamp for learning analytics and certificates
  updatedAt      DateTime      @updatedAt
  /// User ID for staff progress tracking
  userId         String?
  /// Church member ID for member progress tracking
  churchMemberId String?
  lessonId       String
  Lesson         Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChurchMember   ChurchMember? @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@unique([churchMemberId, lessonId])
}

/// GoHighLevel OAuth token storage for API integration per organization
/// Access tokens expire after 24 hours, refresh tokens valid for 1 year
/// Supports both location-level and agency-level OAuth connections
/// Used for SMS automations triggered by connect card scanning
model GHLToken {
  id             String       @id @default(uuid())
  /// Organization this token belongs to
  organizationId String       @unique
  /// OAuth access token for GHL API calls (expires ~24 hours)
  accessToken    String
  /// OAuth refresh token to get new access tokens (expires 1 year)
  refreshToken   String
  /// Access token expiration timestamp
  expiresAt      DateTime
  /// GHL location ID for location-level OAuth (null for agency-level)
  locationId     String?
  /// GHL company ID for agency-level OAuth (null for location-level)
  companyId      String?
  /// Token scopes granted during OAuth authorization
  scopes         String[]
  /// Token creation timestamp
  createdAt      DateTime     @default(now())
  /// Last token refresh timestamp
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("ghl_token")
}

/// Connect card scanning and OCR data management
/// Stores scanned visitor cards with extracted information for follow-up
model ConnectCard {
  id               String             @id @default(uuid())
  /// Organization that owns this connect card
  organizationId   String
  /// S3/Tigris storage key for scanned card image
  imageKey         String
  /// Raw OCR text output from scanning service
  rawText          String?
  /// Structured extracted data (JSON format)
  extractedData    Json?
  /// Extracted visitor name
  name             String?
  /// Extracted email address
  email            String?
  /// Extracted phone number
  phone            String?
  /// Extracted physical address
  address          String?
  /// Prayer request or notes from card
  prayerRequest    String?
  /// Type of visit (First Time, Regular Attender, etc.)
  visitType        String?
  /// Areas of interest or ministry preferences
  interests        String[]           @default([])
  /// Processing status of the card
  status           ConnectCardStatus  @default(PENDING)
  /// Validation issues found during quality check (JSON array)
  validationIssues Json?
  /// Linked church member after processing
  churchMemberId   String?
  /// Campus/location where card was scanned
  locationId       String?
  /// User who scanned the card
  scannedBy        String?
  /// When the card was scanned
  scannedAt        DateTime           @default(now())
  /// Card creation timestamp
  createdAt        DateTime           @default(now())
  /// Last update timestamp
  updatedAt        DateTime           @updatedAt
  organization     Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  churchMember     ChurchMember?      @relation(fields: [churchMemberId], references: [id])
  location         Location?          @relation(fields: [locationId], references: [id])

  @@index([organizationId, status])
  @@index([organizationId, locationId])
  @@index([scannedAt])
  @@map("connect_card")
}

/// Church member profiles - unified model for all people in the church system
/// Supports multiple member types: Visitors, Members, Volunteers, Staff
/// Integration-agnostic design supports GHL, direct signup, connect card scanning, etc.
model ChurchMember {
  id             String                @id @default(uuid())
  /// Organization managing this member (the church)
  organizationId String
  /// Type of member for business logic and filtering
  memberType     MemberType            @default(VISITOR)
  /// Member display name
  name           String
  /// Primary email for communication and enrollment notifications
  email          String?
  /// Member phone number
  phone          String?
  /// Physical address
  address        String?
  /// Timezone for scheduling and notifications
  timezone       String?
  /// Date of first visit to the church
  visitDate      DateTime?
  /// Date they became an official member
  memberSince    DateTime?
  /// Small group or community group ID
  smallGroupId   String?
  /// Serving team or volunteer team ID
  servingTeamId  String?
  /// CRM fields
  tags           String[]              @default([])
  customFields   Json?
  /// Learning assignments and course access (LMS features)
  enrollments    Enrollment[]
  /// Progress tracking across all courses
  lessonProgress LessonProgress[]
  /// External system integrations (GHL, etc.)
  integrations   MemberIntegration[]
  /// CRM relationships
  notes          MemberNote[]
  appointments   Appointment[]
  messages       Message[]
  tasks          Task[]
  connectCards   ConnectCard[]
  /// Payments made by this member
  payments       Payment[]
  /// Member creation timestamp
  createdAt      DateTime              @default(now())
  /// Last profile update
  updatedAt      DateTime              @updatedAt
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([organizationId, memberType])
  @@map("church_member")
}

/// Provider-agnostic integration tracking for church members
/// Supports multiple external systems (GHL, etc.)
/// Decouples core member data from integration-specific metadata
model MemberIntegration {
  id             String        @id @default(uuid())
  /// Member this integration belongs to
  churchMemberId String
  /// Integration provider (e.g., "ghl")
  provider       String
  /// Provider's unique identifier (GHL contactId, etc.)
  externalId     String
  /// Provider-specific metadata stored as JSON
  externalData   Json?
  /// Last successful sync timestamp
  lastSyncAt     DateTime?
  /// Integration status for monitoring
  syncStatus     String        @default("active")
  /// Integration creation timestamp
  createdAt      DateTime      @default(now())
  /// Last sync attempt timestamp
  updatedAt      DateTime      @updatedAt
  churchMember   ChurchMember  @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
  @@index([churchMemberId, provider])
  @@map("member_integration")
}

/// Notes and comments about church members for relationship management
model MemberNote {
  id             String       @id @default(uuid())
  /// Member this note belongs to
  churchMemberId String
  /// Organization for data isolation
  organizationId String
  /// Note content
  content        String
  /// User who created the note
  createdBy      String
  /// Note creation timestamp
  createdAt      DateTime     @default(now())
  /// Last update timestamp
  updatedAt      DateTime     @updatedAt
  churchMember   ChurchMember @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@index([organizationId, churchMemberId])
  @@map("member_note")
}

/// Appointment and calendar event tracking for church members
model Appointment {
  id               String            @id @default(uuid())
  /// Member this appointment is with
  churchMemberId   String
  /// Organization for data isolation
  organizationId   String
  /// Calendar provider integration
  calendarProvider String?           // "cal.com" | "calendly" | "ghl"
  /// External calendar event ID
  externalEventId  String?
  /// Appointment title
  title            String
  /// Appointment description
  description      String?
  /// Start date and time
  startTime        DateTime
  /// End date and time
  endTime          DateTime
  /// Timezone for the appointment
  timezone         String
  /// Current appointment status
  status           AppointmentStatus @default(SCHEDULED)
  /// Location or meeting link
  location         String?
  /// Reminder sent flag
  reminderSent     Boolean           @default(false)
  /// Last sync with external calendar
  syncedAt         DateTime?
  /// Creation timestamp
  createdAt        DateTime          @default(now())
  /// Last update timestamp
  updatedAt        DateTime          @updatedAt
  churchMember     ChurchMember      @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@index([organizationId, startTime])
  @@index([churchMemberId])
  @@map("appointment")
}

/// Message and communication tracking for church members
model Message {
  id             String           @id @default(uuid())
  /// Member this message is with
  churchMemberId String
  /// Organization for data isolation
  organizationId String
  /// Message direction
  direction      MessageDirection // INBOUND | OUTBOUND
  /// Communication channel
  channel        MessageChannel   // EMAIL | SMS | CHAT | CALL
  /// Message content
  content        String
  /// Current message status
  status         MessageStatus    @default(SENT)
  /// When message was sent
  sentAt         DateTime?
  /// When message was delivered
  deliveredAt    DateTime?
  /// When message was read
  readAt         DateTime?
  /// Integration provider
  provider       String?          // "ghl" | "twilio" | "sendgrid"
  /// External message ID
  externalId     String?
  /// Creation timestamp
  createdAt      DateTime         @default(now())
  /// Last update timestamp
  updatedAt      DateTime         @updatedAt
  churchMember   ChurchMember     @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@index([organizationId, churchMemberId])
  @@map("message")
}

/// Task and to-do management for church members
model Task {
  id             String       @id @default(uuid())
  /// Member this task is related to
  churchMemberId String
  /// Organization for data isolation
  organizationId String
  /// Task title
  title          String
  /// Task description
  description    String?
  /// Due date for the task
  dueDate        DateTime?
  /// Task completion status
  status         TaskStatus   @default(PENDING)
  /// Task priority level
  priority       TaskPriority @default(MEDIUM)
  /// User assigned to the task
  assignedTo     String?
  /// Task completion date
  completedAt    DateTime?
  /// Creation timestamp
  createdAt      DateTime     @default(now())
  /// Last update timestamp
  updatedAt      DateTime     @updatedAt
  churchMember   ChurchMember @relation(fields: [churchMemberId], references: [id], onDelete: Cascade)

  @@index([organizationId, dueDate])
  @@index([churchMemberId])
  @@index([assignedTo])
  @@map("task")
}

/// Organization types for business logic and access control
enum OrganizationType {
  /// Platform organization
  PLATFORM
  /// Individual church organization
  CHURCH
  /// Multi-church network or denomination
  NETWORK
}

/// Subscription status for billing and access control
enum SubscriptionStatus {
  /// Free trial period
  TRIAL
  /// Active paid subscription
  ACTIVE
  /// Payment past due
  PAST_DUE
  /// Subscription cancelled
  CANCELLED
  /// Account suspended
  SUSPENDED
}

/// Invitation lifecycle states
enum InvitationStatus {
  /// Invitation sent, awaiting response
  PENDING
  /// Invitation accepted by recipient
  ACCEPTED
  /// Invitation declined by recipient
  DECLINED
  /// Invitation expired or revoked
  EXPIRED
}

/// Course difficulty progression levels for student skill matching and content filtering
enum CourseLevel {
  /// Essential features that must be learned first
  Core
  /// Entry-level courses requiring no prior experience
  Beginner
  /// Courses requiring basic foundational knowledge in the subject area
  Intermediate
  /// Expert-level courses for experienced practitioners
  Advanced
}

/// Course publication and lifecycle management states for instructor workflow
enum CourseStatus {
  /// Course under development, not visible to students in catalog
  Draft
  /// Live course available for enrollment and purchase
  Published
  /// Discontinued course, existing enrollments maintained but no new sales
  Archived
}

/// Enrollment payment and access lifecycle states for Stripe webhook processing
enum EnrollmentStatus {
  /// Initial state after course purchase, awaiting payment confirmation
  Pending
  /// Payment confirmed, student has full course access and can track progress
  Active
  /// Payment failed or refunded, course access revoked but enrollment record preserved
  Cancelled
}

/// User roles for multi-tenant access control and business logic
enum UserRole {
  /// Platform administrators (employees)
  platform_admin
  /// Church owner (primary account holder, billing admin)
  church_owner
  /// Church team member (can manage content and members)
  church_admin
  /// Volunteer leader (can view and manage their team)
  volunteer_leader
  /// End user/client (matches Better Auth's default "user")
  user
}

/// Member types for categorizing people in the church system
enum MemberType {
  /// First-time visitor to the church
  VISITOR
  /// Returning visitor (not yet a member)
  RETURNING
  /// Committed church member
  MEMBER
  /// Active volunteer serving in ministry
  VOLUNTEER
  /// Paid church staff member
  STAFF
}

/// Connect card processing status
enum ConnectCardStatus {
  /// Card scanned, awaiting OCR processing
  PENDING
  /// OCR completed, data extracted
  EXTRACTED
  /// Staff reviewed and verified data
  REVIEWED
  /// Member created/updated from card data
  PROCESSED
  /// Card rejected (duplicate, illegible, etc.)
  REJECTED
}

/// Appointment status tracking
enum AppointmentStatus {
  /// Appointment is scheduled
  SCHEDULED
  /// Appointment is confirmed
  CONFIRMED
  /// Appointment was completed
  COMPLETED
  /// Appointment was cancelled
  CANCELLED
  /// Member was a no-show
  NO_SHOW
}

/// Message direction for communication tracking
enum MessageDirection {
  /// Message received from member
  INBOUND
  /// Message sent to member
  OUTBOUND
}

/// Communication channels for messages
enum MessageChannel {
  /// Email communication
  EMAIL
  /// SMS text message
  SMS
  /// Chat/instant message
  CHAT
  /// Phone call
  CALL
  /// Social media message
  SOCIAL
}

/// Message delivery status
enum MessageStatus {
  /// Message sent
  SENT
  /// Message delivered
  DELIVERED
  /// Message read/opened
  READ
  /// Message failed to send
  FAILED
  /// Message bounced
  BOUNCED
}

/// Task status tracking
enum TaskStatus {
  /// Task is pending
  PENDING
  /// Task in progress
  IN_PROGRESS
  /// Task completed
  COMPLETED
  /// Task cancelled
  CANCELLED
}

/// Task priority levels
enum TaskPriority {
  /// Low priority
  LOW
  /// Medium priority
  MEDIUM
  /// High priority
  HIGH
  /// Urgent priority
  URGENT
}

/// Payment transaction entity for tracking donations and member payments
/// Synced from GoHighLevel via webhooks when payments are collected
model Payment {
  id              String        @id @default(cuid())
  /// Organization that received this payment
  organizationId  String
  /// GoHighLevel payment/invoice ID for sync reference
  ghlPaymentId    String?       @unique
  /// GoHighLevel contact ID for member reference (stored for sync)
  ghlContactId    String?
  /// Internal member ID (optional - linked after member sync)
  churchMemberId  String?
  /// Stripe payment intent ID if available
  stripePaymentId String?

  /// Member information (denormalized for performance)
  memberName  String?
  memberEmail String?
  memberPhone String?

  /// Payment details
  amount        Decimal       @db.Decimal(10, 2)
  /// Payment status
  status        PaymentStatus @default(PENDING)
  /// Payment method used (card, cash, etc)
  paymentMethod String?
  /// Invoice/receipt number
  invoiceNumber String?
  /// Payment description/notes
  description   String?

  /// Timestamps
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  /// Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  churchMember ChurchMember? @relation(fields: [churchMemberId], references: [id])

  @@index([organizationId, status])
  @@index([ghlPaymentId])
  @@index([paidAt])
  @@map("payment")
}

/// Payment transaction status
enum PaymentStatus {
  /// Payment pending/processing
  PENDING
  /// Payment completed successfully
  PAID
  /// Payment failed
  FAILED
  /// Payment refunded
  REFUNDED
  /// Payment partially refunded
  PARTIALLY_REFUNDED
}
