generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Organization entity for multi-tenant agency structure
/// Represents agencies (DigitalDesk, GHL agencies) that purchase and customize courses
model Organization {
  id                 String             @id @default(uuid())
  /// Organization display name (e.g., "DigitalDesk", "Sidecar Platform")
  name               String
  /// URL-friendly identifier for organization
  slug               String             @unique
  /// Organization creation timestamp
  createdAt          DateTime           @default(now())
  /// Last modification date
  updatedAt          DateTime           @updatedAt
  /// Business domain for email validation and branding
  domain             String?
  /// Stripe customer ID for billing
  stripeCustomerId   String?            @unique
  /// Subscription status for billing and access control
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  /// Trial expiration date for access control
  trialEndsAt        DateTime?
  /// Organization type for business logic and access control
  type               OrganizationType   @default(AGENCY)
  /// Organization website URL for branding
  website            String?
  courses            Course[]
  invitations        Invitation[]
  members            Member[]
  users              User[]

  @@map("organization")
}

/// Organization membership for Better Auth organization plugin
model Member {
  id             String       @id @default(uuid())
  /// User ID from Better Auth
  userId         String
  /// Organization ID
  organizationId String
  /// Member role within organization (owner, admin, member)
  role           String
  /// Membership creation date
  createdAt      DateTime     @default(now())
  /// Last update timestamp
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("member")
}

/// Team invitation system for organization onboarding
model Invitation {
  id             String           @id @default(uuid())
  /// Recipient email address
  email          String
  /// Invited user role in organization
  role           String
  /// Invitation token for secure acceptance
  token          String           @unique
  /// Invitation status
  status         InvitationStatus @default(PENDING)
  /// Token expiration date for security
  expiresAt      DateTime
  /// Organization extending the invitation
  organizationId String
  /// User who sent the invitation
  invitedBy      String
  /// User who accepted the invitation (if accepted)
  acceptedBy     String?
  /// Invitation creation timestamp
  createdAt      DateTime         @default(now())
  /// Last status update timestamp
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitation")
}

/// Core user entity supporting multi-tenant authentication and role-based access control
/// Integrates with Better Auth for OAuth flows and Stripe for payment processing
model User {
  id               String           @id
  /// Primary identifier for authentication and communication
  email            String           @unique
  name             String
  /// Better Auth email verification status
  emailVerified    Boolean
  /// Profile avatar URL from OAuth provider
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  /// Temporary ban expiration date
  banExpires       DateTime?
  /// Reason for account suspension
  banReason        String?
  /// Account suspension status
  banned           Boolean?
  /// Stripe customer ID for payment processing
  stripeCustomerId String?          @unique
  /// Organization/Agency ID for multi-tenant structure
  /// Required for all users to establish organizational context
  organizationId   String
  /// Role-based access control for multi-tenant architecture
  role             UserRole?
  courses          Course[]
  enrollment       Enrollment[]
  lessonProgress   LessonProgress[]
  accounts         Account[]
  memberships      Member[]
  sessions         Session[]
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("user")
}

/// Better Auth session management with security tracking and admin impersonation support
model Session {
  id                   String   @id
  token                String   @unique
  userId               String
  expiresAt            DateTime
  /// Security tracking for suspicious activity detection
  ipAddress            String?
  /// Browser/device identification for security analysis
  userAgent            String?
  createdAt            DateTime
  updatedAt            DateTime
  /// Admin user ID when session is impersonated for support
  impersonatedBy       String?
  /// Active organization ID for multi-tenant context
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

/// OAuth provider accounts (GitHub, Google, etc.) linked to user profiles
model Account {
  id                    String    @id
  userId                String
  /// Provider-specific account identifier
  accountId             String
  /// OAuth provider (github, google, etc.)
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  /// For email/password authentication
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

/// Email verification codes and password reset tokens
model Verification {
  id         String    @id
  /// Email address or user identifier
  identifier String
  /// Verification code or token
  value      String
  /// Security expiration for verification attempts
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

/// Course catalog entity representing individual learning modules with hierarchical content structure
/// Supports Stripe payment integration, multi-level difficulty progression, and instructor management
model Course {
  id               String        @id @default(uuid())
  /// Display title for course catalog and student dashboard
  title            String
  /// Rich text course description supporting JSON format for Tiptap editor
  description      String
  /// S3/Tigris storage key for course thumbnail and promotional materials
  fileKey          String
  /// Course price in dollars (converted to cents for Stripe processing)
  price            Int
  /// Estimated completion time in minutes for progress tracking
  duration         Int
  /// Skill level requirement for student filtering
  level            CourseLevel   @default(Beginner)
  /// Stripe Price ID for payment processing and subscription management
  stripePriceId    String        @unique
  /// Course categorization for catalog organization (Development, Design, etc.)
  category         String
  /// Brief course summary for card displays and SEO meta descriptions
  smallDescription String
  /// URL-friendly identifier for course routing and SEO
  slug             String        @unique
  /// Publication workflow state for instructor content management
  status           CourseStatus  @default(Draft)
  /// Course creation timestamp for analytics and sorting
  createdAt        DateTime      @default(now())
  /// Last modification date for content freshness tracking
  updatedAt        DateTime      @updatedAt
  userId           String
  /// Organization ID for multi-tenant course management (null for platform courses)
  organizationId   String?
  chapter          Chapter[]
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment       Enrollment[]
}

/// Chapter organization entity for course content structuring and sequential lesson delivery
/// Supports drag-and-drop reordering through DND Kit integration for instructor content management
model Chapter {
  id        String   @id @default(uuid())
  /// Chapter heading displayed in course navigation and student progress tracking
  title     String
  /// Ordinal sequence number for chapter ordering within course (1, 2, 3...)
  position  Int
  /// Chapter creation timestamp for content development tracking
  createdAt DateTime @default(now())
  /// Last modification date for instructor workflow management
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

/// Individual lesson content entity supporting video delivery and progress tracking
/// Core learning unit with multimedia content hosted on S3/Tigris storage
model Lesson {
  id             String           @id @default(uuid())
  /// Lesson display title for navigation and student dashboard
  title          String
  /// Optional rich text lesson description (JSON format for Tiptap editor)
  description    String?
  /// S3/Tigris storage key for lesson preview image and video poster
  thumbnailKey   String?
  /// S3/Tigris storage key for primary lesson video content
  videoKey       String?
  /// Sequential order within chapter for structured learning progression
  position       Int
  /// Lesson creation timestamp for instructor workflow tracking
  createdAt      DateTime         @default(now())
  /// Last modification date for content management
  updatedAt      DateTime         @updatedAt
  chapterId      String
  Chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
}

/// Student course enrollment record linking users to purchased courses with payment tracking
/// Manages course access control and integrates with Stripe webhook payment processing
model Enrollment {
  id        String           @id @default(uuid())
  /// Payment amount in dollars (Stripe processes in cents, stored as dollars)
  amount    Int
  /// Payment and enrollment lifecycle state
  status    EnrollmentStatus @default(Pending)
  /// Enrollment creation timestamp for payment processing tracking
  createdAt DateTime         @default(now())
  /// Status update timestamp for webhook-driven state changes
  updatedAt DateTime         @updatedAt
  courseId  String
  userId    String
  Course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

/// Individual lesson completion tracking for student progress analytics and course advancement
/// Supports confetti celebrations, progress bars, and learning path unlocking features
model LessonProgress {
  id        String   @id @default(uuid())
  /// Binary completion state - lesson watched and marked complete by student
  completed Boolean  @default(false)
  /// Initial progress record creation (lesson first accessed)
  createdAt DateTime @default(now())
  /// Completion timestamp for learning analytics and certificates
  updatedAt DateTime @updatedAt
  userId    String
  lessonId  String
  Lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

/// Organization types for business logic and access control
enum OrganizationType {
  /// SideCar Platform organization
  PLATFORM
  /// Standard GoHighLevel agency
  AGENCY
  /// Large multi-location agency
  ENTERPRISE
}

/// Subscription status for billing and access control
enum SubscriptionStatus {
  /// Free trial period
  TRIAL
  /// Active paid subscription
  ACTIVE
  /// Payment past due
  PAST_DUE
  /// Subscription cancelled
  CANCELLED
  /// Account suspended
  SUSPENDED
}

/// Invitation lifecycle states
enum InvitationStatus {
  /// Invitation sent, awaiting response
  PENDING
  /// Invitation accepted by recipient
  ACCEPTED
  /// Invitation declined by recipient
  DECLINED
  /// Invitation expired or revoked
  EXPIRED
}

/// Course difficulty progression levels for student skill matching and content filtering
enum CourseLevel {
  /// Entry-level courses requiring no prior experience
  Beginner
  /// Courses requiring basic foundational knowledge in the subject area
  Intermediate
  /// Expert-level courses for experienced practitioners
  Advanced
}

/// Course publication and lifecycle management states for instructor workflow
enum CourseStatus {
  /// Course under development, not visible to students in catalog
  Draft
  /// Live course available for enrollment and purchase
  Published
  /// Discontinued course, existing enrollments maintained but no new sales
  Archived
}

/// Enrollment payment and access lifecycle states for Stripe webhook processing
enum EnrollmentStatus {
  /// Initial state after course purchase, awaiting payment confirmation
  Pending
  /// Payment confirmed, student has full course access and can track progress  
  Active
  /// Payment failed or refunded, course access revoked but enrollment record preserved
  Cancelled
}

/// User roles for multi-tenant access control and business logic
enum UserRole {
  /// SideCar platform administrators (employees)
  PLATFORM_ADMIN
  /// Agency owner (primary account holder, billing admin)
  AGENCY_OWNER
  /// Agency team member (can manage courses and users)
  AGENCY_ADMIN
  /// End user/client of the agency
  END_USER
}


